#esphome run 5277/5277-09.yaml
esphome:
  name: 5277-09
esp32:
  board: nodemcu-32s
  framework:
    type: arduino

# Enable logging
logger:

# Reference the secrets file from a directory above
substitutions: !include ../../secrets.yaml
mqtt:
  id: mqtt_client #MQTT id
  broker: "${mqtt_broker}"
  port: 1883
  username: "${mqtt_username}"
  password: "${mqtt_password}"
ota:
  platform: esphome
  password: "${ota_password}"

wifi:
  networks:
  - ssid: '${wifi_ssid1}'
    password: '${wifi_password1}'
  - ssid: '${wifi_ssid2}'
    password: '${wifi_password2}'
  - ssid: '${wifi_ssid3}'
    password: '${wifi_password3}'

  reboot_timeout: 60s
globals:
  - id: broadcast_switch
    type: int
    restore_value: no
    initial_value: '0'
  - id: A_switch
    type: int
    restore_value: no
    initial_value: '0'
number:
    - platform: template
      name: "id_A_add"
      optimistic: true
      min_value: 0
      max_value: 47
      initial_value: 10
      step: 1
      mode: slider
      id: id_A
      icon: "mdi:counter"
    - platform: template
      name: "current_A_add"
      optimistic: true
      min_value: 0
      max_value: 1023
      initial_value: 10
      step: 1
      mode: slider
      id: current_A
      icon: "mdi:counter"

switch:
  - platform: restart
    id: id_restart
    name: Restart
  - platform: template
    name: "CM Main Switch_add"
    optimistic: true
    turn_on_action:
      - canbus.send:
          # broadcast address - ON
          can_id: 0x150
          use_extended_id: false
          data: [ 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]
      - lambda: |-
          id(broadcast_switch) = 1;
    turn_off_action:
      - canbus.send:
          # broadcast address - OFF
          can_id: 0x150
          use_extended_id: false
          data: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]
      - lambda: |-
          id(broadcast_switch) = 0;
  - platform: template
    name: "A_switch_add"
    optimistic: true
    #грубая точность тока 1й и 2й байт
    turn_on_action:
      - lambda: |-
          // Получаем текущее значение компонента number.
          int can_id_value = 0x160 + (int)id(id_A).state;
          int current = (int)id(current_A).state;
          unsigned char byte1 = current & 0xFF;
          unsigned char byte2 = (current >> 8) & 0b11; // Старший байт  
          // Отправка CAN-сообщения на вычисленный адрес.
          id(mcp2515_bus).send_data(can_id_value, false, {
          0x01, byte1, byte2, 0x00, 0x00, 0x00, 0x00, 0x00});
      - lambda: |-
          id(A_switch) = 1;
    turn_off_action:
      - lambda: |-
          // Получаем текущее значение компонента number.
          int can_id_value = 0x160 + (int)id(id_A).state;
          int current = (int)id(current_A).state;
          unsigned char byte1 = current & 0xFF; 
          unsigned char byte2 = (current >> 8) & 0b11; // Старший байт
          // Отправка CAN-сообщения на вычисленный адрес.
          id(mcp2515_bus).send_data(can_id_value, false, {
          0x00, byte1, byte2, 0x00, 0x00, 0x00, 0x00, 0x00});
      - lambda: |-
          id(A_switch) = 0;
spi:
  - id: McpSpi
    clk_pin: GPIO18
    mosi_pin: GPIO23
    miso_pin: GPIO19

canbus:
  - platform: mcp2515
    cs_pin: GPIO5
    id: mcp2515_bus
    can_id: 4
    bit_rate: 500kbps
interval:
  - interval: 1000ms  # Интервал отправки сообщений 8мс
    then:
      - canbus.send:
          can_id: 0x150
          use_extended_id: false
          data: !lambda
            return { (uint8_t) id(broadcast_switch), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
  - interval: 1000ms  # Интервал отправки сообщений 32мс
    then:
      - lambda: |-
          // Получаем текущее значение компонента number.
          int can_id_value = 0x160 + (int)id(id_A).state;
          int current = (int)id(current_A).state;
          unsigned char byte1 = current & 0xFF;
          unsigned char byte2 = (current >> 8) & 0b11; // Старший байт
          // Отправка CAN-сообщения на вычисленный адрес.
          id(mcp2515_bus).send_data(can_id_value, false, {
          (uint8_t)id(A_switch), byte1, byte2, 0x00, 0x00, 0x00, 0x00, 0x00});
