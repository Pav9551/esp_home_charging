#esphome run 2can/2can_offline.yaml
esphome:
  name: 2can
esp32:
  board: nodemcu-32s
  framework:
    type: arduino

# Enable logging
logger:


spi:
  - id: McpSpi
    clk_pin: GPIO18
    mosi_pin: GPIO23
    miso_pin: GPIO19

canbus:
  - platform: mcp2515
    spi_id: McpSpi
    cs_pin: GPIO5
    can_id: 4
    use_extended_id: false
    bit_rate: 500kbps
    id: mcp2515_bus
    on_frame:
      - can_id:      0b00000000000000000000000000000
        can_id_mask: 0b00000000000000000000000000000
        use_extended_id: false
        remote_transmission_request: false
        then:
          - lambda: |-
              auto pdo_id = can_id;
              std::string b(x.begin(), x.end());
              // Пересылка входящего сообщения на другую CAN шину
              //id(esp32_can_bus).send_data(pdo_id, false, {x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7]});
          - lambda: |-
              bool ext = true;// должно быть true
              auto pdo_id = can_id;
              std::string b(x.begin(), x.end());
              // Преобразование входящего сообщения от системы управления
              // id = 0x150 широковещательный запуск/остановка
              if (pdo_id == 0x150) {
                  if (x[0] == 0x01){
                        id(esp32_can_bus).send_data(0x00, ext,
                          {0b00010000, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});
                    }
                  if (x[0] == 0x00){
                        id(esp32_can_bus).send_data(0x00, ext,
                          {0b00010000, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01});
                    }          
              } 
              // Преобразование входящего сообщения от системы управления
              // id = 0x160 + адрес индивидуальный запуск/остановка
              if (pdo_id >= 0x160 & pdo_id <= 0x18F) {
                  if (x[0] == 0x01){
                        id(esp32_can_bus).send_data(pdo_id - 0x160 + 1, ext,
                          {0b00010000, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00});
                    }
                  if (x[0] == 0x00){
                        id(esp32_can_bus).send_data(pdo_id - 0x160 + 1, ext,
                          {0b00010000, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01});
                    }
                  // Преобразование входящего сообщения от системы управления
                  // Выставка знаения тока, мА
                  uint64_t I = (uint64_t)(x[2] << 8)|x[1];
                  uint64_t I_ma = I * 1000 * 0.0146628;//=1000 * 15А : FF03
                  unsigned char byte1 = (I_ma >> 24) & 0xFF;
                  unsigned char byte2 = (I_ma >> 16) & 0xFF;
                  unsigned char byte3 = (I_ma >> 8) & 0xFF; 
                  unsigned char byte4 = I_ma & 0xFF;
                  id(esp32_can_bus).send_data(pdo_id - 0x160 + 1, ext,
                          {0x10, 0x03, 0x00, 0x00, byte1, byte2, byte3, byte4});               
              } 

  - platform: esp32_can
    id: esp32_can_bus
    rx_pin: GPIO32
    tx_pin: GPIO33
    bit_rate: 125kbps
    can_id: 5
    use_extended_id: true
    on_frame:
      - can_id: 0b00000000000000000000000000000
        can_id_mask: 0b00000000000000000000000000000
        use_extended_id: true
        remote_transmission_request: false
        then:
          - lambda: |-
              auto pdo_id = can_id;
              std::string b(x.begin(), x.end());
              // Пересылка входящего сообщения на другую CAN шину
              //id(mcp2515_bus).send_data(pdo_id, false, {x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7]});
              
#| CAN ID Range       | Условие входа | Действие                                | Отправляемый пакет                                                                 |
#|--------------------|---------------|-----------------------------------------|-------------------------------------------------------------------------------------|
#| `0x150`            | `x[0] == 0x01`| Запуск (широковещательный)              | `{0b00010000, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}`                            |
#| `0x150`            | `x[0] == 0x00`| Остановка (широковещательный)           | `{0b00010000, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01}`                            |
#| `0x160` to `0x18F` | `x[0] == 0x01`| Индивидуальный запуск                   | `{0b00010000, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}`                            |
#| `0x160` to `0x18F` | `x[0] == 0x00`| Индивидуальная остановка                | `{0b00010000, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01}`                            |
#| `0x160` to `0x18F` | -             | Выставление значения тока              | `{0x10, 0x03, 0x00, 0x00, byte1, byte2, byte3, byte4}` (где байты зависят от I_ma) |


      

