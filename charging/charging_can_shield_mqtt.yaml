#esphome run charging/charging_can_shield_mqtt.yaml
#https://esphome.io/components/canbus/
esphome:
  name: charging
  platform: ESP32
  board: esp32dev
globals:
  - id: my_variable
    type: int
    restore_value: no
    initial_value: '0'
  - id: broadcast
    type: int
    restore_value: no
    initial_value: '0'
logger:
# Reference the secrets file from a directory above
substitutions: !include ../../secrets.yaml
mqtt:
  id: mqtt_client #MQTT id
  broker: "${mqtt_broker}"
  port: 1883
  username: "${mqtt_username}"
  password: "${mqtt_password}"
ota:
  platform: esphome
  password: "${ota_password}"

wifi:
  networks:
  - ssid: '${wifi_ssid1}'
    password: '${wifi_password1}'
  - ssid: '${wifi_ssid2}'
    password: '${wifi_password2}'
  - ssid: '${wifi_ssid3}'
    password: '${wifi_password3}'

  reboot_timeout: 60s
# Virtual binary sensor for on/off state
binary_sensor:
  - platform: template
    name: "Device On/Off State"
    id: device_on_off_state
    device_class: power
sensor:
  - platform: template
    name: "Current in Amperes"
    id: current_in_amperes
    unit_of_measurement: "A"
    accuracy_decimals: 2
    update_interval: never  # Обновляется через обработчик сообщений
output:
  - platform: gpio
    id: id_GPIO2
    pin:
      number: GPIO2
      mode: OUTPUT
canbus:
  - platform: esp32_can
    id: esp32_can_bus
    rx_pin: GPIO22
    tx_pin: GPIO21
    bit_rate: 125kbps
    can_id: 5
    use_extended_id: true
    on_frame:
      - can_id:      0b00000000000000000000000000000
        can_id_mask: 0b00000000000000000000000000000
        use_extended_id: true
        remote_transmission_request: false
        then:
          - lambda: |-
              {
              std::string b(x.begin(), x.end()); 
              auto pdo_id = can_id;
              char buffer[50];
              sprintf(buffer, "Hex value: %02x %02x %02x %02x %02x %02x %02x %02x", 
              x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7]);
              if (x.size() == 8 && pdo_id > 0 &&
                x[0] == 0x10 && x[1] == 0x04 && x[2] == 0x00 &&
                x[3] == 0x00 && x[4] == 0x00 && x[5] == 0x00 &&
                x[6] == 0x00 && x[7] == 0x00) {
              ESP_LOGD("main", "Value of my hex: %x, %x, %x, %x, %x, %x, %x, %x", x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7]); 
              id(id_GPIO2).turn_on();
              id(mqtt_client).publish("5277-09_mu/new/topic", buffer);// MQTT publish
              id(device_on_off_state).publish_state(true);
              }
              if (x.size() == 8 && pdo_id > 0 &&
                x[0] == 0x10 && x[1] == 0x04 && x[2] == 0x00 &&
                x[3] == 0x00 && x[4] == 0x00 && x[5] == 0x00 &&
                x[6] == 0x00 && x[7] == 0x01) {
              ESP_LOGD("main", "Value of my hex: %x, %x, %x, %x, %x, %x, %x, %x", x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7]); 
              id(id_GPIO2).turn_off();
              id(mqtt_client).publish("5277-09_mu/new/topic",  buffer);// MQTT publish
              id(device_on_off_state).publish_state(false);
              }
              if (x.size() == 8 && x[0] == 0x10 && x[1] == 0x03) {
              ESP_LOGD("main", "Value of my hex: %x, %x, %x, %x, %x, %x, %x, %x", x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7]); 
              int raw_value = (int(x[4]) << 24) | (int(x[5]) << 16) | (int(x[6]) << 8) | int(x[7]);
              float current_value = raw_value * 0.001; // Преобразование в амперы
              
              // Обновите состояние сенсора тока
              id(current_in_amperes).publish_state(current_value);
              }
              else {
              
              }
              

              }
